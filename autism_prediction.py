# -*- coding: utf-8 -*-
"""ABP_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XrPj0u734ZHEBT_tPFKJE81aDLvGwjRV
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

"""#precleaning data"""

from sklearn import preprocessing

df = pd.read_csv("/content/Autism_Data.csv", sep = r',', skipinitialspace = True)

df = df.fillna(0)
df = df.drop(["used_app_before"], axis = 1)

df = df.rename(columns = {"austim": "autism", "contry_of_res": "country"})
df = df.replace("yes", 1)
df = df.replace("no", 0)
df = df.replace("f", 1)
df = df.replace("m", 0)
df = df.replace("YES", 1)
df = df.replace("NO", 0)
df = df.replace("?", 0)

# Typecasting
df["ethnicity"] = df["ethnicity"].astype(str)
df["country"] = df["country"].astype(str)
df["age_desc"] = df["age_desc"].astype(str)
df["relation"] = df["relation"].astype(str)

# Initializing Encoder
number = preprocessing.LabelEncoder()

# Encoding
df["ethnicity"] = number.fit_transform(df["ethnicity"])
df["country"] = number.fit_transform(df["country"])
df["age_desc"] = number.fit_transform(df["age_desc"])
df["relation"] = number.fit_transform(df["relation"])

df.head()

df.shape

"""#defining X and y, and spliting data"""

X = df.drop(["autism"], axis = 1).values
y = df["autism"].values


from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0, test_size = 0.25)

"""#scaling data"""

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
scaler.fit(X_train)

X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

"""#logistic regression"""

from sklearn.linear_model import LogisticRegression

model = LogisticRegression(solver = "liblinear")
model.fit(X_train, y_train)

prediction = model.predict(X_test)

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
print(accuracy_score(y_test, prediction))
print(classification_report(y_test, prediction))

"""#decision tree"""

from sklearn.tree import DecisionTreeClassifier

model = DecisionTreeClassifier(criterion = "entropy", max_depth = 5)
model.fit(X_train, y_train)

prediction = model.predict(X_test)

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
print(accuracy_score(y_test, prediction))
print(classification_report(y_test, prediction))

"""#random forest"""

from sklearn.ensemble import RandomForestClassifier

model = RandomForestClassifier(criterion = "entropy")
model.fit(X_train, y_train)

prediction = model.predict(X_test)

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
print(accuracy_score(y_test, prediction))
print(classification_report(y_test, prediction))

"""#knn"""

from sklearn.neighbors import KNeighborsClassifier

model = KNeighborsClassifier(n_neighbors = 15)
model.fit(X_train, y_train)

prediction = model.predict(X_test)

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
print(accuracy_score(y_test, prediction))
print(classification_report(y_test, prediction))

"""#svm"""

from sklearn.svm import SVC

model = SVC(kernel = "linear", gamma = 0.1, C = 0.1)
model.fit(X_train, y_train)

prediction = model.predict(X_test)

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
print(accuracy_score(y_test, prediction))
print(classification_report(y_test, prediction))

from sklearn.naive_bayes import GaussianNB
model = GaussianNB()
model.fit(X_train, y_train)

prediction = model.predict(X_test)

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
print(accuracy_score(y_test, prediction))
print(classification_report(y_test, prediction))

prediction

pd.DataFrame({'Actual' : y_test, 'Predicted' : prediction})

plt.figure(figsize = (15, 15))
sns.heatmap(df.corr(), annot = True)

plt.figure(figsize = (8,4))
sns.countplot(x = 'autism', data = df)

plt.figure(figsize = (20,20))
sns.displot(df['autism'])

from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis
model= QuadraticDiscriminantAnalysis()

model.fit(X_train, y_train)

model.score(X_test, y_test)